## Authentication and Permission

### Overview
- Currently, our API doesn't have any restrictions on who can edit or delete data. We would like to implement more advanced behavior.
- Data is always associated with a creator.
- Only authenticated users may create data.
- Only the creator of the data may update or delete it.
- Unauthenticated requests should have fully read-only access.

### Authentication
- Authentication is the mechanism of associating an incoming request with a set of identifying credentials, such as the user the request came from or the token that it was signed with. Permission and throttling policies can then use those credentials to determine if the request should be permitted.
- It always runs at the very start of the view before permission and throttling checks occur and before any other code is allowed to proceed.
- In Django REST Framework (DRF), it provides a number of authentication schemas out of the box and also allows us to implement custom schemas:
  - BasicAuthentication
  - SessionAuthentication
  - TokenAuthentication
  - RemoteUserAuthentication
  - CustomAuthentication

#### Basic Authentication
- This authentication schema uses HTTP Basic Authentication signed against the user's username and password.
- Basic Authentication is generally only appropriate for testing.
- If successfully authenticated, Basic Authentication provides the following credentials:
  - `request.user`: User instance
  - `request.auth`: Will be `None`
- Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate `WWW-Authenticate` header. For example:
  - `WWW-Authenticate: Basic realm="api"`

**Note:**
- If we use Basic Authentication in production, we must ensure that our API is only available over HTTPS.
- We must also ensure that our API clients will always re-request the username and password at login and will never store those details to persistent storage.

### Authorization/Permission
- Permissions are used to grant or deny access for different classes of users to different parts of the API.
- Permission checks are always run at the very start of the view, before any other code is allowed.
- Permission checks typically use the authentication information in the `request.user` and `request.auth` properties to determine if the incoming request should be permitted.

### Permission Classes
- Permissions in REST framework are always defined as a list of permission classes:
  - `AllowAny`
  - `IsAuthenticated`
  - `IsAdminUser`
  - `IsAuthenticatedOrReadOnly`
  - `DjangoModelPermissions`
  - `DjangoModelPermissionsOrAnonReadOnly`
  - `DjangoObjectPermissions`
  - `CustomPermission`

#### `AllowAny`
- No matter if the user is authenticated or not, this class gives access to any user without requiring authentication.
- This permission is not strictly required, but it is the default used in class-based views. If we use it with global settings, it will be useful.

#### `IsAuthenticated`
- If the user is authenticated, they can perform operations with the API.
- This permission is suitable if we want to make our API accessible to registered users.

#### `IsAdminUser`
- This permission class will deny permission to any user unless `user.is_staff` is `True`, in which case permission will be allowed.
- This will be suitable if we want our API only accessible to a subset of trusted users.

#### `IsAuthenticatedOrReadOnly`
- This permission allows authenticated users to perform any request, but unauthenticated users can only perform read-only requests.

#### `DjangoModelPermissions`
- This permission checks the Django model permissions and allows actions accordingly.

#### `DjangoModelPermissionsOrAnonReadOnly`
- Similar to `DjangoModelPermissions`, but allows read-only access to unauthenticated users.

#### `DjangoObjectPermissions`
- This permission checks object-level permissions and allows actions accordingly.

#### `CustomPermission`
- Custom permissions can be implemented by subclassing the `BasePermission` class and overriding the `has_permission` and/or `has_object_permission` methods.

---